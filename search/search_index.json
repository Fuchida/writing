{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Here is where I drop notes, random code snippets and whatever else I find interesting.","title":"Thoughts and Notes While Software Engineering."},{"location":"Y2013/battle-tested/","text":"When looking to add a component to your application, start with the most battle tested widely used component that fits your use case. Try very hard to avoid the new and shiny.","title":"Battle Tested"},{"location":"Y2013/emotional-refactor/","text":"When it comes to learning concepts and then coding my way to a solution or implementation, I feel this weight of sadness when I have to wipe the slate clean, deleting the code and starting over. I want to start over because I know I can write cleaner, well factored and testable code the next time around. But it's so hard to press ctrl+a Delete on my old code, it feels like I created this living thing - not perfect but gets the job done- and now I have to destroy it in order for something better to exist. A heavy heart everytime I refactor.","title":"Emotional Refactor"},{"location":"Y2013/git-quick-setup/","text":"Here is another piece of common git commands I keep forgetting. I think the reason I keep running into these issues is that I keep switching between Git and Mercurial for certain projects. Add your username and email to the global git ==version 1.9.2== config: >>> git config --global user.name \"Your username\" >>> git config --global email \"Your email address\" Specify a default editor after you run git commit: >>> git config --global core-editor your-editor-name>","title":"Git Quick Setup"},{"location":"Y2013/git-stop-tracking-a-directory/","text":"Another gem I keep forgetting; stop tracking a file/directory in git without deleting it. git rm -r --cached <directory> or git rm --cached <file>","title":"Git Stop Tracking a Directory or file"},{"location":"Y2013/swappable-components/","text":"Whenever possible and reasonable, dependencies should be easily swappable when building your application.","title":"Swappable Components"},{"location":"Y2013/symlink-a-file-to-a-directory/","text":"For Whatever reason I keep forgetting this, so let's put it down in writing. ln -s /home/services/web/config.ini /etc/uwsgi/vassals/","title":"Symlink A File to a Directory"},{"location":"Y2013/uwsgi-master-process/","text":"If you are just getting your feet wet with uWSGI, you might have run into the following error when running it. *** WARNING: you are running uWSGI without its master process manager *** To run uWSGI with the master process add the flag -M flag when running uWSGI. Then you will get the following nice message. spawned uWSGI master process (pid: 755) The Master process manager will respawn your process if or when it dies. See this reference doc about the flag.","title":"uwsgi Master Process"},{"location":"Y2014/code-comments-of-intent/","text":"Im sure this is already known within the wider software community but nevertheless it is a realization that I have recently reached. That there are Code Comments that explain function and comments that illustrate intent. Many times while taking a look at open source code, I would know what is happening(syntax, function etc) but then spend extra time trying to understand the intent of the code. To understand why such a decision was made and how it would impact other parts of the code. I believe comments that explain intent are just as important as those that explain function. like the following. ```python elif self.mode == 'reset': #at 'reset',self.elapsed_time return value is expected. #no additional work needs to be done return self.elapsed_time() ``` Comments like these aide the reader in figuring out why another programmer made the decisions they did. Like hearing the inner monologue of your fellow programer when he wrote the code you are now reading.","title":"Code Comments of Intent"},{"location":"Y2014/commit-message-prefixes/","text":"I find it very useful to prefix my commits with a verb that specifies the type of commit I made. This makes it much easier for me to find out at a glance what a commit has done. This is generally common practice from what I've seen in open source software. An example commit would be ==Fix the user lookup function so that deactivated users are returned as well== Here are the examples of my prefixes and what I mean by them Fix = Make a change that corrects a problem Update = Make a change to outdated information Add = Insert new functionality that was not previously there Change = Modify existing information or application state, even though the previous state was correct. I would use this prefix for aesthetic changes, refactoring, idiomising code or performance increase changes. Remove = Take out any information or code that is obsolete and no longer needed.","title":"Commit Messages Prefixes"},{"location":"Y2014/mysql-preflight-checklist/","text":"Here are some things to check off after a fresh install of ==MySQL 5== Open port 3306 on your server Change the bind address listen for external connections on the mysql config file Grant your Mysql user SELECT/UPDATE/DELETE privileges as necessary from specific hosts","title":"MySQL Preflight Checklist"},{"location":"Y2014/tunnel-vision-debugging/","text":"One of my pitfalls when it comes to programming is Tunnel Vision Debugging. Let's assume that I wanted to perform a task, I was then able to accomplish that task and then moved on. Fast forward a couple of weeks, I try to accomplish that same task that worked and now it fails. I look at my code and there is nothing wrong, I have not changed anything and yet it fails. Then I formulate a possible cause of the problem as X, I start going down this rabbit hole to prove to myself that X is indeed the cause of the problem and nothing else. Well I just recently delt with this pitfall while working on Finkit . I was adding a new test to the test suite but when it came to run the tests, all the previous tests failed. For whatever reason, my test setup could not send mail. The connection times out when trying to connect to the SMTP server. I immediately pronounced that that problem was my SMTP server in conjuction with SSL/TLS requirements and so I went down the following path. Rewrite the python mail sending code (still times out) Remove the mail sending module and write the mail sending code using strictly python (still fails) Plan to SSH to the server and remove TLS requirements. 2hrs later, I had to leave home and decided I would do step three later. Now while at a different location, I used the service called Nitrous ( Nitrous.io has since shut down ) to run the tests one more time before diving into Postfix. My tests passed without a flinch, turns out TM , I had forgotten that my residential ISP blocks port 25. I should have started at the base of the issue, \"why is the connection timing out\" and troubleshooted the network vs the application then move on to the application.","title":"Tunnel Vision Debugging"},{"location":"Y2014/virtualenv-and-python-versions/","text":"Want to install a certain version of python in your virtualenv ? Here's a working example for virtualenv 1.10.1 on Linux 12.04 virtualenv --no-site-packages --distribute -p /usr/bin/python3.3 directory-name","title":"Virtualenv and Python Version"},{"location":"Y2014/xcode-beginner-shortcuts/","text":"I just started to learn Objective C and here are some Xcode 5 shortcuts that I find useful when just getting started with the Editor. Move cursor back and forth one word. Shift + Option + Left/Right arrow Move cursor up and down one line. Shift + Option + Up/Down arrow Delete current line where the cursor is located. Control + k Open new tab. Command + T Close tab. Command + W Switch to left or right tab. Shift + Command + { or } Open existing file. Shift + Command + O Switch between .m and .h file. Control + Command + Up/Down arrow keys Run or Build the app Command + R Show/Hide Project Navigator Command + 0","title":"Xcode Beginner Shortcuts"},{"location":"Y2015/python-one-liner-refactors/","text":"I like it when I find one liner that make the code better and and faster to understand. The worst one liners are those that force you to twist you mind in weird ways in order to understand them. A simple one, utilizing the bool return value from the \"in\" operator def is_wanted(self, item): if item in self.wanted_items: return True return False def is_wanted(self, item): return item in self.wanted_items Using list comprehension and the \"any\" built in function def is_wanted(self, item): for type in self.wanted_types: if item.upper().startswith(type): return True else: return False def is_wanted_type(self, item): return any([item.upper().startswith(type) for type in self.wanted_types])","title":"Python one liner refactors"},{"location":"Y2015/with-python-pick-random-item/","text":"If you have a list of items or a sequence and you want to pic a random item from said sequence. Here is a quick way to do it from random import choice letters = ['a', 'b', 'c', 'd'] print(choice(letters))","title":"With Python pick random item"},{"location":"Y2016/bit-counting/","text":"Description: Write a function that takes an (unsigned) integer as input, and returns the number of bits that are equal to one in the binary representation of that number. The binary representation of 1234 is 10011010010, so the function should return 5 in this case. Because there are five \"1\" or bits that are set in 10011010010. Solution: def countBits(n): return bin(n).count(\"1\") Source: CodeWars","title":"Counting Set Bits"},{"location":"Y2016/bit-counting/#description","text":"Write a function that takes an (unsigned) integer as input, and returns the number of bits that are equal to one in the binary representation of that number. The binary representation of 1234 is 10011010010, so the function should return 5 in this case. Because there are five \"1\" or bits that are set in 10011010010.","title":"Description:"},{"location":"Y2016/bit-counting/#solution","text":"def countBits(n): return bin(n).count(\"1\")","title":"Solution:"},{"location":"Y2016/bit-counting/#source","text":"CodeWars","title":"Source:"},{"location":"Y2016/code-execution-process/","text":"1. Compiles .py source code to .pyc bytecode. 2. Bytcode is fed to the python virtual machine 3. The python virtual machine executes bytcode instructions Bytecode Generation and Python Virtual Machine are two videos that do a good job of giving a brief and clear explanation.","title":"Python Code Execution Process"},{"location":"Y2016/color-auto-testing/","text":"We can get colored output and automatic testing in our python development process by using rednose and sniffer . Below are some example files that you can use. person.py: # py:3.5 class Person(object): def alias(self): return \"Fuchida\" test_person.py: # py:3.5 import unittest from person import Person class PersonTestCase(unittest.TestCase): def setUp(self): self.test_alias = 'Fuchida' def test_bar(self): \"\"\"alias method returns test_name value \"\"\" self.assertEqual(Person().alias(), self.test_alias, msg=\"Got: {}, Expected: {}\".format(Person().alias(), self.test_alias)) req.txt: colorama==0.3.7 nose==1.3.7 python-termstyle==0.1.10 rednose==1.2.1 sniffer==0.3.5 Setup: Create a virtual environment Install requirements from req.txt Add the person.py and test_person.py files to your environment Run sniffer -x--rednose You will end up with colored output when tests pass or fail and if you change the files, the tests will rerun automatically.","title":"Colored Output and Automatic Testing"},{"location":"Y2016/color-auto-testing/#personpy","text":"# py:3.5 class Person(object): def alias(self): return \"Fuchida\"","title":"person.py:"},{"location":"Y2016/color-auto-testing/#test_personpy","text":"# py:3.5 import unittest from person import Person class PersonTestCase(unittest.TestCase): def setUp(self): self.test_alias = 'Fuchida' def test_bar(self): \"\"\"alias method returns test_name value \"\"\" self.assertEqual(Person().alias(), self.test_alias, msg=\"Got: {}, Expected: {}\".format(Person().alias(), self.test_alias))","title":"test_person.py:"},{"location":"Y2016/color-auto-testing/#reqtxt","text":"colorama==0.3.7 nose==1.3.7 python-termstyle==0.1.10 rednose==1.2.1 sniffer==0.3.5","title":"req.txt:"},{"location":"Y2016/color-auto-testing/#setup","text":"Create a virtual environment Install requirements from req.txt Add the person.py and test_person.py files to your environment Run sniffer -x--rednose You will end up with colored output when tests pass or fail and if you change the files, the tests will rerun automatically.","title":"Setup:"},{"location":"Y2016/flexibility-and-the-future/","text":"When building small components, its important to build with some flexibility in mind. What you want to avoid is to try to solve potential future problems that don't yet exist.","title":"Flexibility and the Future"},{"location":"Y2016/joining-url-paths/","text":"When you want to join an absolute url path http://domain.com with a relative path /authenticate changes are you'd want do something like this # py:2.7 absolute = \"http://domain.com\" relative = \"/authenticate\" joined_path = absolute + absolute # http://domain.com/authenticate Problems would occur if the absolute path changes to http://domain.com/ or to http://domain.com/index.html . A better option would be to use urljoin to properly handle both of the above cases. # py:2.7 from urlparse import urljoin absolute = \"http://domain.com\" relative = \"/authenticate\" joined_path = urljoin(\"http://domain.com/index.html\", \"/authenticate\") # \"http://domain.com/authenticate\"","title":"Joining URL Paths"},{"location":"Y2016/log-local-file/","text":"Here is a small function to log to a local file in python, I use it all the time. # py:2.7, 3.5 def get_local_logger(): \"\"\" Log to local .log file \"\"\" logger = logging.getLogger(__file__) hdlr = logging.FileHandler(__file__ + '.log') time_name_fmt = '%(asctime)s|%(name)s|%(filename)s' log_detail_fmt = ':%(lineno)s|%(levelname)s|%(message)s' logging_format = time_name_fmt + log_detail_fmt formatter = logging.Formatter(logging_format) hdlr.setFormatter(formatter) logger.addHandler(hdlr) logger.setLevel(logging.INFO) return logger >> local_logger = get_local_logger() >> local_logger.INFO(\"Logging to local file!\")","title":"Local File Logging"},{"location":"Y2016/multi-item-import/","text":"Here is a clean way to import multiple items from the same module. # py:2.7 # Do this from module import (func1, func2, func3 func4, func5, func6, func7, func8, func9 ) # Instead of this from module import func1, func2, func3, func4, func5, func6, func7, func8, func9","title":"Multi Item Import"},{"location":"Y2016/python-classes-by-example/","text":"Basic structure of a class # py:3.5 class Person(object): def __init__(self, name, gender): self.name = name self.gender = gender def get_name(self): return self.name def get_gender(self): return self.gender def __str__(self): return \"%s is a %s\" % (self.get_name(), self.get_gender()) Subclassing # py:3.5 class Citizen(Person): def __init__(self, name, country, gender): super.__init__(self, name, gender) self.country = country def get_nationality(self): return self.country class SecretAgent(Citizen): def __init__(self, name, country, gender, isActive): super().__init__(name, country, gender) self.isActive = isActive # Method overriding def get_name(self): return \"###Redacted###\" def get_gender(self): return \"###Redacted###\" def get_nationality(self): return \"###Redacted###\" def get_status(self): return self.isActive >>> jack = Citizen(\"Jack\", \"Tanzania\", \"Male\") >>> print jack.get_name() Jack >>> Light909 = SecretAgent(\"Jane\", \"Ukraine\", \"Female\", False) >>> Dark552 = SecretAgent(\"Jim\", \"Spain\", \"Male\", True) >>> print Light909.get_name() ###Redacted###","title":"Python Classes by Example"},{"location":"Y2016/python-classes-by-example/#basic-structure-of-a-class","text":"# py:3.5 class Person(object): def __init__(self, name, gender): self.name = name self.gender = gender def get_name(self): return self.name def get_gender(self): return self.gender def __str__(self): return \"%s is a %s\" % (self.get_name(), self.get_gender())","title":"Basic structure of a class"},{"location":"Y2016/python-classes-by-example/#subclassing","text":"# py:3.5 class Citizen(Person): def __init__(self, name, country, gender): super.__init__(self, name, gender) self.country = country def get_nationality(self): return self.country class SecretAgent(Citizen): def __init__(self, name, country, gender, isActive): super().__init__(name, country, gender) self.isActive = isActive # Method overriding def get_name(self): return \"###Redacted###\" def get_gender(self): return \"###Redacted###\" def get_nationality(self): return \"###Redacted###\" def get_status(self): return self.isActive >>> jack = Citizen(\"Jack\", \"Tanzania\", \"Male\") >>> print jack.get_name() Jack >>> Light909 = SecretAgent(\"Jane\", \"Ukraine\", \"Female\", False) >>> Dark552 = SecretAgent(\"Jim\", \"Spain\", \"Male\", True) >>> print Light909.get_name() ###Redacted###","title":"Subclassing"},{"location":"Y2016/string-pairs-python/","text":"Description: Complete the solution so that it splits the string into pairs of two characters. If the string contains an odd number of characters then it should replace the missing second character of the final pair with an underscore ('_'). solution('abc') # should return ['ab', 'c_'] solution('abcdef') # should return ['ab', 'cd', 'ef'] Solution: # py:3.4 def solution(letters): split_letters = [ letters[index-1] + letters[index] \\ for index in range(len(letters)) if index % 2 ] if len(letters) % 2: split_letters.append(letters[-1] + '_') return split_letters Source: CodeWars","title":"Creating String Pairs with Python"},{"location":"Y2016/string-pairs-python/#description","text":"Complete the solution so that it splits the string into pairs of two characters. If the string contains an odd number of characters then it should replace the missing second character of the final pair with an underscore ('_'). solution('abc') # should return ['ab', 'c_'] solution('abcdef') # should return ['ab', 'cd', 'ef']","title":"Description:"},{"location":"Y2016/string-pairs-python/#solution","text":"# py:3.4 def solution(letters): split_letters = [ letters[index-1] + letters[index] \\ for index in range(len(letters)) if index % 2 ] if len(letters) % 2: split_letters.append(letters[-1] + '_') return split_letters","title":"Solution:"},{"location":"Y2016/string-pairs-python/#source","text":"CodeWars","title":"Source:"},{"location":"Y2017/asymptotic-notation/","text":"Khan Academy has a great explanation on the need of Asymptotic notation. Here is the best part. When we drop the constant coefficients and the less significant terms, we use asymptotic notation. Asymptotic notation","title":"Asymptotic notation"},{"location":"Y2017/command-line-arguments/","text":"Here is some simple code that allows you to call different functions based on user provided options. There are more robust tools out there but if you just want something quick this should be enough. # 3.x.py from os import sys def run_option_a(): print(\"Hello from option A !\") def run_option_b(): print(\"Hello from option B !\") if __name__ == \"__main__\": if len(sys.argv) >= 2: if sys.argv[1] == '-a': run_option_a() elif sys.argv[1] == '-b': run_option_b() else: print('Unrecognized command') else: print ('* Please enter -a for option A or -b for option B') # Usage: python file_name.py -a python file_name.py -b","title":"Python Command line arguments"},{"location":"Y2017/module-level-imports/","text":"Can't remember where I read this but it's good to keep in mind why module level imports should be avoided. Having imports later in the file can be brittle and can cause small changes in the ordering of your code to break the module entirely","title":"Avoid Module Level Imports"},{"location":"Y2017/run-linux-process-in-background/","text":"bash-4.2$ nohup python long_process.py & [1] 13077 bash-4.2$ nohup: ignoring input and appending output to \"nohup.out\" Press ENTER after you see the above message","title":"Run Linux Process in Background"},{"location":"Y2017/teminal-output-to-a-file/","text":"All output will be sent to terminal and file. bash-4.2$ command |& tee output.txt Append to existing file bash-4.2$ command |& tee -a output.txt Source: Stackoverflow","title":"Save terminal output to a file"},{"location":"Y2018/python-decorator-by-example/","text":"A Python decorator allows you to execute some code before and after the wrapped function is executed. We typically use decorators for validation, logging, introspection or whenever we need to extend the functionality of an existing function without modifying it directly. Basic Setup for a decorator # py:3 def logger(func): def wrap(*args, **kwards): if \"House\" in args: print \"House Logging\" else: print \"logging\" return func(*args, **kwards) return wrap @logger def say_hello(word): print word say_hello(\"House\") >> House Logging >> House","title":"Python Decorator by Example"},{"location":"Y2018/python-decorator-by-example/#basic-setup-for-a-decorator","text":"# py:3 def logger(func): def wrap(*args, **kwards): if \"House\" in args: print \"House Logging\" else: print \"logging\" return func(*args, **kwards) return wrap @logger def say_hello(word): print word say_hello(\"House\") >> House Logging >> House","title":"Basic Setup for a decorator"},{"location":"Y2021/find-duplicates-in-list/","text":"Problem: Given a list of integers identify duplicates Example: 1 input: [2,4,5,6,2] output: [2] 2 input: [3,5,6,7,3,7,11,7] output [3,7] def find_duplicates(data): prev_seen = [] duplicates = set() for item in data: if item in prev_seen: duplicates.add(item) else: prev_seen.append(item) return duplicates data = [3,5,6,7,3,7,11,7,8,8,8] print(find_duplicates(data)) # >> {8, 3, 7}","title":"Find Duplicates in a List"},{"location":"Y2021/json-dict-diff/","text":"Use Python to find the difference between two dictionaries with nested dictionaries. \"\"\" Provided two dictiories, identify the difference in the two, ke in mind that a value may also be a dictionary \"\"\" origin = { \"fname\":\"abdul\", \"lname\":\"salim\", \"profession\":\"software engineer\", \"phone_number\": \"612-360-7526\", \"address\": { \"street\":\"101 broad\", \"city\":\"plattsburgh\", \"state\":\"MN\", \"country\":\"US\", \"cord\": { \"lat\":\"110\", \"long\":\"1113\" } } } reference = { \"fname\":\"abdul\", \"lname\":\"salim\", \"profession\":\"plumber\", \"marital_status\":\"Single\", \"address\":{ \"street\":\"103 broad\", \"city\":\"plattsburgh\", \"state\":\"MN\", \"country\":\"US\", \"cord\": { \"lat\":\"110\", \"long\":\"1112\" } } } def compare(origin, reference): for key, value in origin.items(): if key not in reference.keys(): print(f\"-{key}:{origin[key]}\") continue if origin[key] != reference[key]: print(f\"+{key}:{reference[key]}\") if key in reference.keys() and all([isinstance(origin[key], dict),\\ isinstance(reference[key], dict)]): compare(origin[key], reference[key]) for ref_key in reference.keys(): if ref_key not in origin.keys(): print(f\"+{ref_key}:{reference[ref_key]}\") compare(origin, reference)","title":"Find the difference between two dictionaries/json"},{"location":"Y2021/set-to-list/","text":"Today I learned that converting an ordered list to a set and back to a list does not maintain the original order. >>> [32.0,36.0,39.0,40.0] [32.0, 36.0, 39.0, 40.0] >>> set([32.0,36.0,39.0,40.0]) {32.0, 40.0, 36.0, 39.0} >>> list(set([32.0,36.0,39.0,40.0])) [32.0, 40.0, 36.0, 39.0]","title":"Set to List Converation"},{"location":"Y2023/concurency-primitives/","text":"mutexes: a locking mechanism to synchronize access to a shared resource Semaphores: a signaling mechanism to control access to a shared resource Deadlock: programming error where a collection of tasks are all waiting for a lock/semaphore but the lock is not available and no tasks are configure Barrier Synchronization: a programming concept to align a collection of threads to a specific execution point; sometimessupport added to hardware Channels a method for interprocess communication (local or remote) Sources: University of Cincinnati Quora medium/itIsMadhavan","title":"Parallel/Concurrency Primitives"},{"location":"Y2023/concurency-primitives/#sources","text":"University of Cincinnati Quora medium/itIsMadhavan","title":"Sources:"},{"location":"Y2023/diagonal-diff/","text":"def diagonalDifference(data): size = len(data[0]) primary = 0 secondary = 0 for index in range(size): primary += data[index][index] secondary += data[index][size - index - 1] return abs(primary - secondary)","title":"Find the absolute diagonal difference of a matrix"}]}